import logging
import time
import asyncio
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import torch
from peft import PeftModel
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
logger.info("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è tokenizer –∏ base model...")
base_model_path = "/home/mikhail/models/mistral-7b"
lora_path = "/home/mikhail/dostoevsky-texts/lora-mistral-dostoevsky/checkpoint-500"

tokenizer = AutoTokenizer.from_pretrained(base_model_path, use_fast=True)
model = AutoModelForCausalLM.from_pretrained(
    base_model_path,
    device_map="auto",
    torch_dtype=torch.float16,
)
logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞...")
model = PeftModel.from_pretrained(model, lora_path)
logger.info(f"‚úÖ LoRA –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏–∑: {lora_path}")


# ü§ñ Telegram bot
API_TOKEN = "7996316253:AAE-oxy-EZBXC-m5W2Mg4UWXywiMSGWRPVk"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
# üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
generator = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    return_full_text=False  # –¢–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
)
def generate_response(prompt: str) -> str:
    logger.info(f"üî∑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å. Prompt: {prompt}")
    input_text = f"User: {prompt}\nBot:"

    output = generator(
        input_text,
        max_new_tokens=200,
        do_sample=True,
        top_k=50,
        top_p=0.95,
        temperature=0.8,
        repetition_penalty=1.2
    )

    response_text = output[0]["generated_text"].strip()
    logger.info(f"üìù Generated raw: {response_text}")

    # ‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –ø–æ –º–µ—Ç–∫–∞–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "User:" –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ "Bot:"
    import re
    match = re.search(r"^(.*?)(User:|Bot:|\n|$)", response_text, re.DOTALL)
    response = match.group(1).strip() if match else "ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª."

    return response

@dp.message(F.text)
async def handle_message(message: Message):
    logger.info(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")
    await message.answer("‚úçÔ∏è –î—É–º–∞—é...")

    try:
        response = generate_response(message.text)
        await message.answer(response)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")


async def main():
    logger.info("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

